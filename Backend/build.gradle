plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
    id 'com.google.cloud.tools.jib' version '3.1.4'
}

group = 'com.kvwl'


java {
	sourceCompatibility = '17'
}

jar {
    enabled = false
}

bootJar {
    archiveBaseName = project.name.toLowerCase()
}

repositories {
	mavenCentral()
}

dependencies {
    compileOnly("org.projectlombok:lombok")
    compileOnly("org.projectlombok:lombok")

    annotationProcessor("org.projectlombok:lombok")

    implementation project(":Shared")
    implementation("org.apache.poi:poi:5.2.4")
    implementation("org.apache.poi:poi-ooxml:5.2.4") {
//        exclude(group = "org.apache.santuario")
    }
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation("org.flywaydb:flyway-core:9.22.3")
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

//
//    implementation("org.apache.poi:poi:5.2.4") {
//        exclude group: 'org.apache.logging.log4j', module: 'log4j-api'
//        //exclude group: 'commons-codec', module: 'commons-codec'
//    }
//    constraints {
//        implementation('commons-codec:commons-codec:1.16.0') {
//            because 'previous versions have a bug impacting this application'
//        }
//    }
//
//    implementation("org.apache.poi:poi-ooxml:5.2.4") {
//        exclude group: 'org.apache.logging.log4j', module: 'log4j-api'
//    }
//// alternative f√ºr Befehl oben
//    implementation('commons-codec:commons-codec:[1.16.0, 1.16.1[!!1.17.0')
//// erlaubt alle Versionen 1.16.0 bis 1.16.XXXXX
//    implementation('commons-codec:commons-codec:1.16.+, 1.17.0!!')
//
//    implementation('commons-codec:commons-codec') {
//        version {
//            strictly '[1.16.0['
//            prefer '1.16.0'
//        }
//    }
//
//
//    implementation 'javax.validation:validation-api:2.0.1.Final'
//    implementation 'javax.xml.ws:jaxws-api:2.3.1'
//    implementation 'com.sun.xml.ws:jaxws-rt:4.0.2'
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
	useJUnitPlatform()
}


task copyProperties(type: Copy) {
    from 'src'
    include 'gradle.properties'
    into 'build/libs'
}

tasks.register('copy', Copy) {
    group("IO")
    from(file('gradle.properties'))
    into('/build/libs')
}

tasks.register('delete', Delete) {
    group("IO")
    delete(file('/build/libs/gradle.properties'))
}


delete.dependsOn('copy')

tasks.register('copyForZip', Copy) {
    group("IO")
    from(file('gradle.properties'))
    into('/build/libs')

    from(file('HELP.md'))
    into('/build/libs')
}

tasks.register('packageDistribution', Zip) {
    group('zip')

    from 'build/libs' // Verzeichnis, das ins ZIP-Archiv eingeschlossen wird
    include '*.*' // Datei(en), die eingeschlossen werden sollen

    destinationDirectory = file('build/libs/dist')
    archiveFileName = 'demo.zip'
}

tasks.register('makeDirs') {
    file('build/libs/dist').mkdirs()
}

packageDistribution.dependsOn('build')
packageDistribution.dependsOn('copyForZip')
packageDistribution.dependsOn('makeDirs')

jib {
    allowInsecureRegistries = true

    from {
        image = 'openjdk:11-jre-slim'
    }
    to {
        tags = ['latest', project.version]
        image = 'localhost:5000/backend:latest'
//        auth {
//            username = 'admin'
//            password = 'admin'
//        }
    }
    container {
        jvmFlags = ['-Xms512m', '-Xmx1g']
        ports = ['8080']
    }
}

configurations.all {
    resolutionStrategy {
        // fail eagerly on version conflict (includes transitive dependencies)
        failOnVersionConflict()
        failOnDynamicVersions()
    }
}
//
//dependencyLocking {
//    lockAllConfigurations()
//}